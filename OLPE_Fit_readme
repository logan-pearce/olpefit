###############################################################################
#                                                                             #
#                   The Orbits of Long Period Exoplanets:                     #
#                                OLPE Fit                                     #
#                                                                             #
#                        Written by Logan A. Pearce                           #
###############################################################################

OLPE Fit is a PSF fitting algorithm for astrometric measurements in NIRC2 images.  It is specifically designed for 
determining the astrometric position of a wide-orbit companion around the host star.  Rather than emperical PSF fitting, 
OLPE Fit models the star and companion PSF as the sum of two 2-D Gaussians - a narrow Gaussian modeling the diffraction 
limited core and a wider Gaussian capturing the Airy rings.  It uses a Gibbs Sampler Metroplis-Hasting Markov Chain Monte 
Carlo algorithm to optimize the parameters of model fit to image data.  The model is built using Astropy's 2-D gaussian 
model function.

The model parameters are:
     - xcs: x pixel position for the center of the star
     - ycs: y pixel position for the star
     - xcc: x position for the companion
     - ycc: y position for the companion
     - dx: offset in the x direction for the center of the wide Gaussian from the narrow.
     - dy: offset in the y direction
             The offsets allow for asymmetry in the Airy rings to be incorportated into the fit
     - amps: Amplitude of the model for the star
       	     This parameter tracks the total amplitude of the model.  The amplitude of the wide Gaussian is computed as a 
	     fraction of the amplitude of the total amplitude, the narrow Gaussian amplitude is computed from that so that 
	     the peak to the wide plus peak of the narrow sums to the amps
	     parameter.  Sky background is not included in this parameter
     - ampc: Amplitude of the model for the companion.  Computed in the same way.
     The following parameters are shared by star and companion as they have the same point spread function:
     - bkgd: Sky background level
     - sigmax: std deviation of the narrow Gaussian in the x direction
     - sigmay: std deviation of the narrow Gaussian in the y direction
     - sigmax2: std deviation of the wide Gaussian in the x direction
     - sigmay2: std deviation of the wide Gaussian in the y direction
     - theta: angle offset for the major axis of the narrow 2-D Gaussian
     - theta2: angle offset for the wide Gaussian

OLPE Fit is run in three steps.
Step 1: take user input to identify an approximate position for star and companion in the image to use an an initial 
guess for feeding into the model.  It also asks the user to point to an empty area of the image to get an estimate of 
the sky background.
Step 2: take in the initial guess from step 1 and perform the MCMC optimization of model parameters. Step 2 is designed 
to run on the TACC supercomputer, but can also be run on a local machine.  It is written for parallel operations, meaning 
that the core processors on the machine serve as "walkers" for the MCMC.  The TACC machine Lonestar 5 has 48 cores, so 
running Step 2 on Lonestar 5 gives 48 walkers for the MCMC.  If step 2 is run for 25000 total jumps, that gives 1.2 million 
data points.  This allows for a high burn in and still have adequate data points.  25000 jumps of step 2 on Lonestar 5 runs 
in about 6 hours of clock time for a 1024x1024 image (512x512 images will run significantly faster).
Step 4: (no there is not a step 3.  There used to be, but it is now obsolete) Takes in the outputs from each walker in step 2 
and performs astrometric corrections and to (very precisely) compute the separation and position angle for the companion 
relative to the host star.  Throughout the entire correction process, step 4 performs each correction on each individual data 
point (after burn in) and computes PA/sep on each data point, taking the median value only at the end.  This is advantageous 
because it determines accurate standard deviations on PA and separation parameters rather than attempting to rotate RA/Dec or 
pixel errors.  This gives a robust determination of the errors on these measurements.

The final result is a corner plot of each of the model parameters (plus PA/Sep) for each image, a text file log of all images in 
the observation epoch, and another text file of just PA/Sep and std devs for the whole epoch, which can be imported into a system 
aggregator.

OLPE Fit gives a robust astrometric measurement for NIRC2 images at a precision not seen in literature.  In some cases the 
uncertainty is at the diffraction limit for NIRC2.  It is a bit costly in clock time, but it pays off in precision.


How to run OLPE_Fit:
(These scripts are written to take image files stored using my directory scheme: "starsystem/observation_epoch_date(year_month_date)/imagefiles.fits")

1.  Upload all images to TACC:
Use the script "upload_epoch_to_tacc.py" to upload every fits image in an epoch folder.
Before running the script, make a directory in the TACC work directory for the epoch with the same file path as on home computer.
Command line: "python upload_epoch_to_tacc.py GSC6214/2008_06_17"

2.  Log on to TACC.  Use the flags -XY to allow you to interact through ssh (requried for step 1).  In the TACC work directory, 
run OLPE Fit step 1 on all images in the epoch.
First start an idev session (so you're not running jobs on a login node): Command line (in TACC work directory): 'idev'
Then run step 1: "python olpe_fit_tacc_step1.py GSC6214/2008_06_17"
It will call up each image and ask for your input on initial guess location for companion and star for each image, and 
to select an empty area to measure the sky background, and output a text file to the same directory subscripted 
"_initial_position_guess"

3.  Schedule step 2 for each image:
Either on the home computer or in TACC, run the script "write_epoch_sbatch.py"  using the syntax "python write_epoch_sbatch.py 
GSC6214/2008_06_17".  This script creates the sbatch text files for scheduling TACC jobs on the slurm scheduler (If running 
from home computer, you will have to scp all text files to TACC before proceeding)
In the TACC command line from the work directory, schedule each step 2 job using the command: 
"sbatch GSC6214/2017_06_27/sbatch/GSC6214_2017_26771_sbatch_step2".  The script "execute_step3_scheduler.py" will input these 
commands for all images in an epoch using the command "python execute_step2_scheduler.py GSC6214/2008_06_17".
Step 2 will run for 6 hours on each image.  You should get emails when the jobs have been scheduled and completed.

4.  Step 4 takes the output from step 2 and computes PA and Separation in each image.  From the home computer, run in the 
command line "python epoch_pasep.py GSC6214/2008_06_16") to run step 4 on the whole epoch at once (Individually, run "python 
olpe_fit_tacc_step4.py GSC6214/2008_06_17/N2.20080617.29357.fits").  Output from step 4 will be a text file in the epoch 
directory called "epoch_positions_olpefit_pasep" (Position Angle and Separation in degrees and milliarcseconds) and 
"epoch_positions_olpefit_radec" (RA and Dec mean and std in milliarcseconds), which can be fed into the epoch position 
processing pipeline, and "epoch_positions_olpefit_log" which gives more detailed information on the results for each image.
To do a whole epoch at once, run "python execute_step4.py GSC6214/2008_06_17"

#######################################################################################################################################
How to run OLPE_Fit using multiple parallel cores on TACC (MPI):
(These scripts are written to take image files stored using my directory scheme: "starsystem/observation_epoch_date(year_month_date)/imagefiles.fits")

1.  Upload all images to TACC:
Use the script "upload_epoch_to_tacc.py" to upload every fits image in an epoch folder.
Before running the script, make a directory in the TACC work directory for the epoch with the same file path as on home computer.
Command line: "python upload_epoch_to_tacc.py GSC6214/2008_06_17"

2.  Log on to TACC.  Use the flags -XY to allow you to interact through ssh (requried for step 1).  In the TACC work directory, run OLPE Fit step 1 on all images in the epoch.
First start an idev session (so you're not running jobs on a login node): Command line (in TACC work directory): 'idev'
Then run step 1: "python olpe_fit_tacc_step1.py GSC6214/2008_06_17"
It will call up each image and ask for your input on initial guess location for companion and star for each image, and to select an empty area to measure the sky background, and output a text file to the same directory subscripted "_initial_position_guess"

3.  Schedule step 2 for each image:
Either on the home computer or in TACC, run the script "write_epoch_sbatch_mpi.py"  using the syntax "python write_epoch_sbatch_mpi.py GSC6214/2008_06_17".  This script creates the sbatch text files for scheduling TACC jobs on the slurm scheduler (If running from home computer, you will have to scp all text files to TACC before proceeding)
In the TACC command line from the work directory, schedule each step 2 job using the command: "sbatch GSC6214/2017_06_27/sbatch/GSC6214_2017_26771_sbatch_step2".  The script "execute_step2_scheduler.py" will input these commands for all images in an epoch using the command "python execute_step2_scheduler.py GSC6214/2008_06_17".

4.  When all images have completed step 2, return to the home computer and run "download_from_tacc_mpi.py" to download all the step 2 outputs to home computer.  Command line (on home computer terminal): "python download_from_tacc_mpi.py GSC6214/2008_06_17"
Step 2 outputs csv files of all parameter arrays for each image.  This script pulls down those files and places them in the epoch's directory in a folder called "imagenumber_olpefit_results_mpi”

5.  Step 4 takes the output from step 2 and computes PA and Separation in each image.  From the home computer, run in the command line "python epoch_pasep_mpi.py GSC6214/2008_06_16") to run step 4 on the whole epoch at once (Individually, run "python olpe_fit_tacc_step4_mpi.py GSC6214/2008_06_17/N2.20080617.29357.fits").  Output from step 4 will be a text file in the epoch directory called "epoch_positions_olpefit_pasep" (Position Angle and Separation in degrees and milliarcseconds) and "epoch_positions_olpefit_radec" (RA and Dec mean and std in milliarcseconds), which can be fed into the epoch position processing pipeline, and "epoch_positions_olpefit_log" which gives more detailed information on the results for each image.
To do a whole epoch at once, run "python execute_step4.py GSC6214/2008_06_17"
